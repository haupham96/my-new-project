
#logging
logging.level.org.springframework = DEBUG

# H2 Database config
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:dcapp
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=root
spring.datasource.password=123456
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#Postgres
spring.jpa.database=POSTGRESQL
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:postgresql://localhost:5432/document_manager?createDatabaseIfNotExist=true
spring.datasource.username=postgres
spring.datasource.password=12345678

# Mysql database config
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.datasource.url=jdbc:mysql://localhost:3306/demo?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=codegym

# Connection pool - hikari
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.maxLifetime=1800000

## JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
#JPA logging
logging.level.org.hibernate.SQL=DEBUG
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

#for spring security
spring.main.allow-circular-references=true

#swagger ui custom path
springdoc.swagger-ui.path=/swagger-ui.html


## For Spring Mail config
server.port=9083
server.servlet.context-path=/

spring.mail.default-encoding=UTF-8
spring.mail.host=smtp.gmail.com
spring.mail.username=yourgmail
#generate google app password at https://myaccount.google.com/u/1/apppasswords
spring.mail.password=lxzhukwcyzbwfuzg
spring.mail.port=587
spring.mail.protocol=smtp
spring.mail.test-connection=false
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Auto reload file resources after generate file -> for upload file
spring.web.resources.static-locations=file:///D:/training_beetech/PhamVanHau/microservices_project/container/product-service/src/main/resources/static/

#============================================================= MICROSERVICES ===============================================================

#For Eureka Server 
eureka.instance.hostname=localhost
# because it is server itselfs , so it dont need to be registed as a client
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
server.port=8761

#For Eureka Clients
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=name of client

#for API Gateway
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=api-gateway
logging.level.root=INFO
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO
logging.level.org.springframework.cloud.gateway=TRACE

#  service route
spring.cloud.gateway.routes[0].id=product-service
##lb = load balance
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

# Discovery server route
spring.cloud.gateway.routes[2].id=discovery-server
spring.cloud.gateway.routes[2].uri=http://localhost:8761
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[2].filters[0]=SetPath=/

# Discovery server static route
spring.cloud.gateway.routes[3].id=discovery-server-static
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**

#Enable actuator Distributed tracing : circuitbreaker + resilience4j
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Circuit breaker - resilience4j
### Register health indicator to see health of the actuator -> to see 3 state open , halfopen , close
#                                      inventorty : name using in @CircuitBreaker(name = "inventory") in OrderController
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

resilience4j.circuitbreaker.instances.inventory.eventConsumerBufferSize=10
### Count number of request - decide when to close and open state
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
### The circuit breaker will change the state after 5 request
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
### 50% of request is failed -> fail
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

### How many call allow when in half-open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

## Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeoutDuration=3s

## Resilience4J Retry Properties
# retry 3 times
resilience4j.retry.instances.inventory.maxAttempts=3
# wait for 5 second for each retry
resilience4j.retry.instances.inventory.waitDuration=5s

# zipkin - sleuth
spring.zipkin.base-url=http://localhost:9411
# send 100% request for zipkin tracing
spring.sleuth.sampler.probability=1.0

# Kafka Properties for producer
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.example.orderservice.event.OrderPlacedEvent

# Kafka Properties for reciever
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.consumer.group-id= notificationId
# recieve message -> need to deserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.example.notificationservice.dto.OrderPlacedEvent
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

# can access prometheus from /actuator/prometheus
management.endpoints.web.exposure.include=prometheus
