server.port=8081
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.1.22:3306/microservices
spring.datasource.username=root
spring.datasource.password=123456
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=DEBUG
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

host.name=192.168.1.22

#Eureka
spring.application.name=order-service
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
eureka.client.fetch-registry=true

#Enable actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Circuit breaker - resilience4j
### Register health indicator to see health of the actuator -> to see 3 state open , halfopen , close
#                                      inventorty : name using in @CircuitBreaker(name = "inventory") in OrderController
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

resilience4j.circuitbreaker.instances.inventory.eventConsumerBufferSize=10
### Count number of request - decide when to close and open state
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
### The circuit breaker will change the state after 5 request
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
### 50% of request is failed -> fail
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

### How many call allow when in half-open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

## Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeoutDuration=3s

## Resilience4J Retry Properties
# retry 3 times
resilience4j.retry.instances.inventory.maxAttempts=3
# wait for 5 second for each retry
resilience4j.retry.instances.inventory.waitDuration=5s

# zipkin - sleuth
spring.zipkin.base-url=http://localhost:9411
# send 100% request for zipkin tracing
spring.sleuth.sampler.probability=1.0

# Kafka Properties for producer
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.example.orderservice.event.OrderPlacedEvent
